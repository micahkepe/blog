<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Micah&#x27;s Secret Blog - databases</title>
    <subtitle>An assortment of my ramblings and random adventures.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://micahkepe.com/blog/tags/databases/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://micahkepe.com/blog"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-08-27T00:00:00+00:00</updated>
    <id>https://micahkepe.com/blog/tags/databases/atom.xml</id>
    <entry xml:lang="en">
        <title>A Deep Dive into SQLite&#x27;s Query Optimizer</title>
        <published>2024-08-27T00:00:00+00:00</published>
        <updated>2024-08-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Micah Kepe
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://micahkepe.com/blog/sqlite-query-optimizer/"/>
        <id>https://micahkepe.com/blog/sqlite-query-optimizer/</id>
        
        <summary type="html">&lt;p&gt;I &lt;strong&gt;love&lt;&#x2F;strong&gt; databases, but they are still largely a magical black box to me, so
in this post, I&#x27;m going to explore how SQLite&#x27;s query optimizer works. We&#x27;ll
delve together into the process of how SQL queries are parsed, optimized, and
executed, with a particular focus on the optimization phase. By the end of this
post, you&#x27;ll have a better understanding of how SQLite&#x27;s query optimizer works
and how it can help you write more efficient queries.&lt;&#x2F;p&gt;</summary>
        
    </entry>
</feed>
